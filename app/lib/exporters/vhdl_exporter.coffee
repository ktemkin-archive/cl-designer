###
  
 [Hey, this is CoffeeScript! If you're looking for the original source,
  look in "fsm.coffee", not "fsm.js".]

 QuickLogic Combinational Block Generator
 author: Kyle J. Temkin <ktemkin@binghamton.edu>

 Based on:
 Finite State Machine Designer (http://madebyevan.com/fsm/)
 portions Copyright (c) 2010 Evan Wallace

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation
 files (the "Software"), to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following
 conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.

###

class exports.VHDLExporter

  #
  # Initialies a new VHDL exporter.
  # 
  constructor: (@designer, @name) ->
    @inputs = @designer.inputs()
    @outputs = @designer.outputs()

  #
  # Renders a simple header.
  #
  #
  _render_header: ->
    header  = "---\n"
    header += "--- Combinational Logic Array: #{name}\n"
    header += "--- Automatically Generated by QuickLogic\n"
    header += "---\n\n"
    header


  #
  # Render the standard VHDL "includes".
  #
  _render_includes: ->
    includes  = "library IEEE;\n"
    includes  += "use IEEE.std_logic_1164.all;\n\n"
    includes


  #
  # Generates an entity for the given VHDL module.
  #
  _render_entity: ->
    entity  = "entity #{@name} is port(\n"
   
    #TODO: Bring these back if I decide to allow sequential implementation?
    #entity += "  --Global signals.\n"
    #entity += "  clk : in std_ulogic;\n"
    #entity += "  reset : in std_ulogic;\n" if @designer.has_reset_transition()
    #entity += "\n"

    #Insert inputs, if applicable.
    if @designer.inputs()
      entity += "  --Inputs:\n  "
      entity += @_io_list(@inputs, 'in') + ";\n\n"


    entity += "  --Outputs:\n  "
    entity += @_io_list(@outputs, 'out') + "\n"
    entity += ");\n"
    entity += "end entity;"
    entity



  #
  # Returns a VHDL-format list of inputs or outputs.
  #
  _io_list: (names, direction, type='std_ulogic') ->

    #Get a list of all VHDL port declarations.
    io = ("#{name} : #{direction} #{type}" for name in names)

    #And join them with a semicolon.
    io.join(";\n  ")


  #
  # Generates an architecture for the given VHDL module.
  #
  _render_architecture: ->
    
    #Define the main types for the FSM.
    architecture  = "architecture combinational_expressions of #{@name} is\n\n"
    architecture += "begin\n\n"

    #Implement the main logic.
    architecture += "#{@_constant_assignments()}\n"

    #And close all of the functional elements.
    architecture += "end architecture;\n"


  #
  # Generates the body of the architecture for the given VHDL module.
  #
  _constant_assignments: ->

    assignments = ""

    for equation in @designer.all_equations()
      assignments += "  #{equation.to_VHDL()}\n"

    assignments



  #
  # Creates a new VHDL hardware description of the given FSM.
  #
  render: ->
    vhdl  = "#{@_render_header()}\n\n"
    vhdl += "#{@_render_includes()}\n\n"
    vhdl += "#{@_render_entity()}\n\n"
    vhdl += "#{@_render_architecture()}\n"



